{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n  var define = require('amdefine')(module, require);\n}\n\ndefine(function (require, exports, module) {\n  var util = require('./util');\n\n  var binarySearch = require('./binary-search');\n\n  var ArraySet = require('./array-set').ArraySet;\n\n  var base64VLQ = require('./base64-vlq');\n\n  var quickSort = require('./quick-sort').quickSort;\n\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);\n  }\n\n  SourceMapConsumer.fromSourceMap = function (aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  };\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n\n\n  SourceMapConsumer.prototype._version = 3; // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n\n\n  SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n\n  SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    var mappings;\n\n    switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n\n\n  SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line'); // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n\n    needle.source = this._sources.indexOf(needle.source);\n    var mappings = [];\n\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine; // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn; // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n\n        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources'); // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null); // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    } // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n\n\n    sources = sources.map(util.normalize); // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n\n  BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n    smc.file = aSourceMap._file; // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping();\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n    return smc;\n  };\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n\n\n  BasicSourceMapConsumer.prototype._version = 3;\n  /**\n   * The list of original sources.\n   */\n\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n\n\n  BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      } else if (aStr.charAt(index) === ',') {\n        index++;\n      } else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine; // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n\n        str = aStr.slice(index, end);\n        segment = cachedSegments[str];\n\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        } // Generated column.\n\n\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1]; // Original line.\n\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine; // Lines are stored 0-based\n\n          mapping.originalLine += 1; // Original column.\n\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n\n\n  BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n    }\n\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n\n\n  BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index]; // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      } // The last mapping for each line spans the entire line.\n\n\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n\n\n  BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n\n        if (source !== null) {\n          source = this._sources.at(source);\n\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n\n        var name = util.getArg(mapping, 'name', null);\n\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n\n\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n\n    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n      return sc == null;\n    });\n  };\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n\n\n  BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n\n    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n\n      if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n\n      if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    } // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n\n\n    if (nullOnMissing) {\n      return null;\n    } else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n\n\n  BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    source = this._sources.indexOf(source);\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n\n      if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n\n      lastOffset = offset;\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      };\n    });\n  }\n\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n\n  IndexedSourceMapConsumer.prototype._version = 3;\n  /**\n   * The list of original sources.\n   */\n\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      }\n\n      ;\n      return sources;\n    }\n  });\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n\n  IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    }; // Find the section containing the generated position we're trying to map\n    // to an original position.\n\n    var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n      var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n\n      if (cmp) {\n        return cmp;\n      }\n\n      return needle.generatedColumn - section.generatedOffset.generatedColumn;\n    });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n      bias: aArgs.bias\n    });\n  };\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n\n\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n\n\n  IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var content = section.consumer.sourceContentFor(aSource, true);\n\n      if (content) {\n        return content;\n      }\n    }\n\n    if (nullOnMissing) {\n      return null;\n    } else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n\n\n  IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i]; // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n\n\n  IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[i];\n\n        var source = section.consumer._sources.at(mapping.source);\n\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n\n        this._sources.add(source);\n\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n\n        this._names.add(name);\n\n        name = this._names.indexOf(name); // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.column + (section.generatedOffset.generatedLine === mapping.generatedLine) ? section.generatedOffset.generatedColumn - 1 : 0,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n\n      ;\n    }\n\n    ;\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n});","map":{"version":3,"sources":["/home/safouman/Desktop/Coding/crwn-clothing/node_modules/source-map/lib/source-map/source-map-consumer.js"],"names":["define","require","module","exports","util","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","join","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","relative","has","indexOf","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","version","sources","names","sourcesContent","file","normalize","fromArray","create","consumer","SourceMapConsumer_fromSourceMap","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","Mapping","s","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","aSource","nullOnMissing","url","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"mappings":"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","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n  var quickSort = require('./quick-sort').quickSort;\n\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    return sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap)\n      : new BasicSourceMapConsumer(sourceMap);\n  }\n\n  SourceMapConsumer.fromSourceMap = function(aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  }\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._charIsMappingSeparator =\n    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    };\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, 'line');\n\n      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to 0, we thus find the last mapping for\n      // the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, 'column', 0)\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n      if (!this._sources.has(needle.source)) {\n        return [];\n      }\n      needle.source = this._sources.indexOf(needle.source);\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions,\n                                    binarySearch.LEAST_UPPER_BOUND);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (aArgs.column === undefined) {\n          var originalLine = mapping.originalLine;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we found. Since\n          // mappings are sorted, this is guaranteed to find all mappings for\n          // the line we found.\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we were searching for.\n          // Since mappings are sorted, this is guaranteed to find all mappings for\n          // the line we are searching for.\n          while (mapping &&\n                 mapping.originalLine === line &&\n                 mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n\n      return mappings;\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n  BasicSourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      // Because we are modifying the entries (by converting string sources and\n      // names to indices into the sources and names ArraySets), we have to make\n      // a copy of the entry or else bad things happen. Shared mutable state\n      // strikes again! See github issue #191.\n\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping;\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n\n          destOriginalMappings.push(destMapping);\n        }\n\n        destGeneratedMappings.push(destMapping);\n      }\n\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  BasicSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  BasicSourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end, value;\n\n      while (index < length) {\n        if (aStr.charAt(index) === ';') {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        }\n        else if (aStr.charAt(index) === ',') {\n          index++;\n        }\n        else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n\n          // Because each offset is encoded relative to the previous one,\n          // many segments often have the same encoding. We can exploit this\n          // fact by caching the parsed variable length fields of each segment,\n          // allowing us to avoid a second parse if we encounter the same\n          // segment again.\n          for (end = index; end < length; end++) {\n            if (this._charIsMappingSeparator(aStr, end)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end);\n\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n\n            if (segment.length === 2) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            if (segment.length === 3) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            cachedSegments[str] = segment;\n          }\n\n          // Generated column.\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n\n          if (segment.length > 1) {\n            // Original source.\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n\n            // Original line.\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n\n            // Original column.\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n\n            if (segment.length > 4) {\n              // Original name.\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  BasicSourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator, aBias) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  BasicSourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  BasicSourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            if (this.sourceRoot != null) {\n              source = util.join(this.sourceRoot, source);\n            }\n          }\n          var name = util.getArg(mapping, 'name', null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: name\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() &&\n        !this.sourcesContent.some(function (sc) { return sc == null; });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  BasicSourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      // This function is used recursively from\n      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n      // don't want to throw if we can't find the source - we just want to\n      // return null, so we provide a flag to exit gracefully.\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  BasicSourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, 'source');\n      if (this.sourceRoot != null) {\n        source = util.relative(this.sourceRoot, source);\n      }\n      if (!this._sources.has(source)) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      source = this._sources.indexOf(source);\n\n      var needle = {\n        source: source,\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          };\n        }\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n\n      if (offsetLine < lastOffset.line ||\n          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n      lastOffset = offset;\n\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      }\n    });\n  }\n\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  IndexedSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      };\n      return sources;\n    }\n  });\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  IndexedSourceMapConsumer.prototype.originalPositionFor =\n    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      // Find the section containing the generated position we're trying to map\n      // to an original position.\n      var sectionIndex = binarySearch.search(needle, this._sections,\n        function(needle, section) {\n          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n\n          return (needle.generatedColumn -\n                  section.generatedOffset.generatedColumn);\n        });\n      var section = this._sections[sectionIndex];\n\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine -\n          (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn -\n          (section.generatedOffset.generatedLine === needle.generatedLine\n           ? section.generatedOffset.generatedColumn - 1\n           : 0),\n        bias: aArgs.bias\n      });\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function (s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  IndexedSourceMapConsumer.prototype.sourceContentFor =\n    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  IndexedSourceMapConsumer.prototype.generatedPositionFor =\n    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line +\n              (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column +\n              (section.generatedOffset.generatedLine === generatedPosition.line\n               ? section.generatedOffset.generatedColumn - 1\n               : 0)\n          };\n          return ret;\n        }\n      }\n\n      return {\n        line: null,\n        column: null\n      };\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  IndexedSourceMapConsumer.prototype._parseMappings =\n    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[i];\n\n          var source = section.consumer._sources.at(mapping.source);\n          if (section.consumer.sourceRoot !== null) {\n            source = util.join(section.consumer.sourceRoot, source);\n          }\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n\n          var name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n\n          // The mappings coming from the consumer for the section have\n          // generated positions relative to the start of the section, so we\n          // need to offset them to be relative to the start of the concatenated\n          // generated file.\n          var adjustedMapping = {\n            source: source,\n            generatedLine: mapping.generatedLine +\n              (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.column +\n              (section.generatedOffset.generatedLine === mapping.generatedLine)\n              ? section.generatedOffset.generatedColumn - 1\n              : 0,\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name: name\n          };\n\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === 'number') {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        };\n      };\n\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    };\n\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n});\n"]},"metadata":{},"sourceType":"script"}